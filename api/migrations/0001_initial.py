# Generated by Django 5.0.4 on 2024-04-09 15:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=225)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('diagnose_date', models.DateField()),
                ('learn_more', models.URLField()),
                ('explanation', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Nutrients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_updated', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_company', models.BooleanField(default=False)),
                ('account_balance', models.PositiveIntegerField(default=1000)),
                ('image_url', models.URLField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cover_photo', models.URLField()),
                ('profile_photo', models.URLField()),
                ('name', models.CharField(max_length=225)),
                ('about', models.TextField(null=True)),
                ('joined', models.DateTimeField(auto_now=True)),
                ('admin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='company', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Ingredients',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('spoonacular_id', models.CharField(max_length=225)),
                ('allergies', models.ManyToManyField(related_name='ingredients', to='api.allergy')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9)),
                ('long', models.DecimalField(decimal_places=6, max_digits=9)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MedicalProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dietary_highlights', models.TextField()),
                ('summary', models.TextField()),
                ('conditions', models.ManyToManyField(related_name='medical_profiles', to='api.medicalcondition')),
                ('food_allergies', models.ManyToManyField(to='api.allergy')),
            ],
        ),
        migrations.CreateModel(
            name='Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('frequency', models.CharField(max_length=100)),
                ('dosage', models.CharField(max_length=100)),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='api.medicalcondition')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalNutrientNeedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(null=True)),
                ('metric', models.CharField(choices=[('g', 'Gram'), ('kg', 'Kilogram'), ('mg', 'Milligram'), ('l', 'Liter'), ('ml', 'Milliliter'), ('tsp', 'Teaspoon'), ('tbsp', 'Tablespoon'), ('cup', 'Cup'), ('pt', 'Pint'), ('qt', 'Quart'), ('gal', 'Gallon'), ('oz', 'Ounce'), ('lb', 'Pound'), ('pinch', 'Pinch'), ('dash', 'Dash'), ('fl oz', 'Fluid Ounce'), ('mgal', 'Milligallon'), ('clove', 'Clove'), ('bunch', 'Bunch'), ('packet', 'Packet'), ('nutmeg', 'Nutmeg'), ('piece', 'Piece'), ('whole', 'Whole'), ('sprig', 'Sprig'), ('head', 'Head'), ('drops', 'Drops')], default='g', max_length=10)),
                ('medicalprofile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nutritional_needs', to='api.medicalprofile')),
                ('nutrient', models.ManyToManyField(related_name='nutrient_items', to='api.nutrients')),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('preparation_method', models.CharField(choices=[('g', 'Gram'), ('kg', 'Kilogram'), ('mg', 'Milligram'), ('l', 'Liter'), ('ml', 'Milliliter'), ('tsp', 'Teaspoon'), ('tbsp', 'Tablespoon'), ('cup', 'Cup'), ('pt', 'Pint'), ('qt', 'Quart'), ('gal', 'Gallon'), ('oz', 'Ounce'), ('lb', 'Pound'), ('pinch', 'Pinch'), ('dash', 'Dash'), ('fl oz', 'Fluid Ounce'), ('mgal', 'Milligallon'), ('clove', 'Clove'), ('bunch', 'Bunch'), ('packet', 'Packet'), ('nutmeg', 'Nutmeg'), ('piece', 'Piece'), ('whole', 'Whole'), ('sprig', 'Sprig'), ('head', 'Head'), ('drops', 'Drops')], max_length=255, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to='api.company')),
                ('ingredients', models.ManyToManyField(related_name='recipes', to='api.ingredients')),
            ],
        ),
        migrations.CreateModel(
            name='StoreItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_in', models.DateTimeField(auto_now=True)),
                ('amount', models.PositiveIntegerField()),
                ('metric', models.CharField(choices=[('g', 'Gram'), ('kg', 'Kilogram'), ('mg', 'Milligram'), ('l', 'Liter'), ('ml', 'Milliliter'), ('tsp', 'Teaspoon'), ('tbsp', 'Tablespoon'), ('cup', 'Cup'), ('pt', 'Pint'), ('qt', 'Quart'), ('gal', 'Gallon'), ('oz', 'Ounce'), ('lb', 'Pound'), ('pinch', 'Pinch'), ('dash', 'Dash'), ('fl oz', 'Fluid Ounce'), ('mgal', 'Milligallon'), ('clove', 'Clove'), ('bunch', 'Bunch'), ('packet', 'Packet'), ('nutmeg', 'Nutmeg'), ('piece', 'Piece'), ('whole', 'Whole'), ('sprig', 'Sprig'), ('head', 'Head'), ('drops', 'Drops')], default='g', max_length=10)),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock', to='api.ingredients')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='api.store')),
            ],
        ),
    ]
